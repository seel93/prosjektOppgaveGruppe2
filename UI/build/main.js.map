{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/admin/admin.component.html","webpack:///./src/app/admin/admin.component.scss","webpack:///./src/app/admin/admin.component.ts","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/equipment/equipment.component.html","webpack:///./src/app/equipment/equipment.component.scss","webpack:///./src/app/equipment/equipment.component.ts","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.scss","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/navbar/navbar.component.html","webpack:///./src/app/navbar/navbar.component.scss","webpack:///./src/app/navbar/navbar.component.ts","webpack:///./src/app/order/order.component.html","webpack:///./src/app/order/order.component.scss","webpack:///./src/app/order/order.component.ts","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.scss","webpack:///./src/app/register/register.component.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/commonApiCalls.service.ts","webpack:///./src/app/services/notification.service.ts","webpack:///./src/app/services/order.service.ts","webpack:///./src/app/user/user.component.html","webpack:///./src/app/user/user.component.scss","webpack:///./src/app/user/user.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(f)\\\" novalidate *ngIf=\\\"!auth\\\" class=\\\"logginForm\\\">\\n    <p class=\\\"h5 text-center mb-4\\\">Logg inn </p>\\n\\n    <div class=\\\"md-form\\\">\\n        <i class=\\\"fa fa-user prefix grey-text\\\"></i>\\n        <input type=\\\"text\\\" id=\\\"form3\\\" class=\\\"form-control\\\" name=\\\"username\\\" ngModel mdbActive>\\n        <label for=\\\"form3\\\">Ansatt id</label>\\n    </div>\\n\\n    <div class=\\\"md-form\\\">\\n        <i class=\\\"fa fa-dollar prefix grey-text\\\"></i>\\n        <input type=\\\"password\\\" id=\\\"form2\\\" class=\\\"form-control\\\" name=\\\"password\\\" ngModel mdbActive>\\n        <label for=\\\"form2\\\">Passord</label>\\n    </div>\\n\\n    <div class=\\\"text-center\\\">\\n        <button class=\\\"btn btn-primary\\\" mdbRippleRadius>\\n            <i class=\\\"fa fa-send mr-1\\\"></i> Logg inn</button>\\n    </div>\\n\\n</form>\\n<!--Logginn Form-->\\n\\n<div *ngIf=\\\"auth\\\">\\n    <h4>Oversikt over utstyr:</h4>\\n    <table class=\\\"table equipmentTable\\\">\\n\\n        <!--Table head-->\\n        <thead class=\\\"blue-grey lighten-4\\\">\\n            <tr>\\n                <th>Utstyr navn:</th>\\n                <th>Type:</th>\\n                <th>Tilgjengelighet:</th>\\n                <th>Status:</th>\\n                <th>Tilgjengelig ved:</th>\\n                <th>pris time:</th>\\n                <th>pris dag:</th>\\n                <th>Ramme</th>\\n                <th>Hjulstørrelse</th>\\n            </tr>\\n        </thead>\\n        <!--Table head-->\\n\\n        <!--Table body-->\\n        <tbody>\\n            <tr *ngFor=\\\"let equipment of equipmentList; let i = index\\\" ngModel>\\n                <td>{{equipment.name}}</td>\\n                <td>{{equipment.type}}</td>\\n                <td>\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary relative waves-light\\\" (click)=\\\"avaliableModal.show(); locationConfig(equipment)\\\"\\n                        mdbWavesEffect>\\n                        Sjekk Tilgjengelighet\\n                    </button>\\n                </td>\\n                <td>\\n                    <span *ngIf=\\\"!auth\\\">{{equipment.status}}</span>\\n                    <button *ngIf=\\\"auth\\\" type=\\\"button\\\" class=\\\"btn btn-primary relative waves-light\\\" (click)=\\\"statusModal.show(); statusConfig(equipment)\\\"\\n                        mdbWavesEffect>\\n                        Endre status\\n                    </button>\\n                </td>\\n                <td>\\n                    <span *ngIf=\\\"!auth\\\">{{equipment.status}}</span>\\n                    <button *ngIf=\\\"auth\\\" type=\\\"button\\\" class=\\\"btn btn-primary relative waves-light\\\" (click)=\\\"locationModal.show(); locationConfig(equipment)\\\"\\n                        mdbWavesEffect>\\n                        Endre sted\\n                    </button>\\n                </td>\\n                <td>{{equipment.hourPrice}}</td>\\n                <td>{{equipment.dailyPrice}}</td>\\n                <td>{{equipment.frame}}</td>\\n                <td>{{equipment.wheelSize}}</td>\\n            </tr>\\n        </tbody>\\n        <!--Table body-->\\n    </table>\\n\\n    <div mdbModal #statusModal=\\\"mdb-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"mystatusModalLabel\\\"\\n        aria-hidden=\\\"true\\\" [config]=\\\"{backdrop: false, ignoreBackdropClick: true}\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n            <div class=\\\"modal-content\\\">\\n                <div class=\\\"modal-header\\\">\\n                    <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"statusModal.hide()\\\">\\n                        <span aria-hidden=\\\"true\\\">×</span>\\n                    </button>\\n                    <h4 class=\\\"modal-title w-100\\\" id=\\\"myModalLabel\\\">Endre status på</h4>\\n                </div>\\n                <div class=\\\"modal-body\\\">\\n                    <p>{{selectedEquipmentName}}</p>\\n                    <p> status: {{selectedEquipmentStatus}}</p>\\n                    <div class=\\\"btn-group sorterBtn\\\" dropdown>\\n                        <button dropdownToggle type=\\\"button\\\" class=\\\"btn btn-primary dropdown-toggle waves-light\\\" mdbWavesEffect>\\n                            Endre status til: {{assignedSatus}}\\n                        </button>\\n                        <div class=\\\"dropdown-menu dropdown-primary\\\">\\n                            <a class=\\\"dropdown-item\\\" (click)=\\\"assignNewStatus('flytt')\\\">\\n                                Flytt\\n                            </a>\\n                            <a class=\\\"dropdown-item\\\" (click)=\\\"assignNewStatus('reparasjon')\\\">\\n                                Reparasjon\\n                            </a>\\n                            <a class=\\\"dropdown-item\\\" (click)=\\\"assignNewStatus('stjålet')\\\">\\n                                Stjålet\\n                            </a>\\n                            <a class=\\\"dropdown-item\\\" (click)=\\\"assignNewStatus('klar')\\\">\\n                                Klar\\n                            </a>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-secondary waves-light\\\" aria-label=\\\"Close\\\" (click)=\\\"statusModal.hide()\\\" mdbWavesEffect>Lukk</button>\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary relative waves-light\\\" (click)=\\\"updateLocationOrStatus('status')\\\" mdbWavesEffect>Lagre endringer</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div mdbModal #avaliableModal=\\\"mdb-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"avaliableModalLabel\\\"\\n        aria-hidden=\\\"true\\\" [config]=\\\"{backdrop: false, ignoreBackdropClick: true}\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n            <div class=\\\"modal-content\\\">\\n                <div class=\\\"modal-header\\\">\\n                    <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"avaliableModal.hide()\\\">\\n                        <span aria-hidden=\\\"true\\\">×</span>\\n                    </button>\\n                    <h4 class=\\\"modal-title w-100\\\" id=\\\"myModalLabel\\\">Tilgjengelighet</h4>\\n                </div>\\n                <div class=\\\"modal-body\\\">\\n                    <p>{{selectedEquipmentName}}</p>\\n                    <p>Sist sett på {{selectedEquipmentLocation.name}}</p>\\n                    <p>Post nummer: {{selectedEquipmentLocation.postalCode}}</p>\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-secondary waves-light\\\" aria-label=\\\"Close\\\" (click)=\\\"avaliableModal.hide()\\\" mdbWavesEffect>Lukk</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n\\n    <div mdbModal #locationModal=\\\"mdb-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"locationModalLabel\\\"\\n        aria-hidden=\\\"true\\\" [config]=\\\"{backdrop: false, ignoreBackdropClick: true}\\\">\\n        <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n            <div class=\\\"modal-content\\\">\\n                <div class=\\\"modal-header\\\">\\n                    <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"locationModal.hide()\\\">\\n                        <span aria-hidden=\\\"true\\\">×</span>\\n                    </button>\\n                    <h4 class=\\\"modal-title w-100\\\" id=\\\"myModalLabel\\\">Endre sted</h4>\\n                </div>\\n                <div class=\\\"modal-body\\\">\\n                    <p>{{selectedEquipmentName}}</p>\\n                    <p>Sist sett på {{selectedEquipmentLocation.name}}</p>\\n                    <p>Post nummer: {{selectedEquipmentLocation.postalCode}}</p>\\n                    <div class=\\\"btn-group sorterBtn\\\" dropdown>\\n                        <button dropdownToggle type=\\\"button\\\" class=\\\"btn btn-primary dropdown-toggle waves-light\\\" mdbWavesEffect>\\n                            Endre sted til:\\n                        </button>\\n                        <div class=\\\"dropdown-menu dropdown-primary\\\">\\n                            <a class=\\\"dropdown-item\\\" *ngFor=\\\"let place of placesList\\\" (click)=\\\"assignNewPlace(place.place_id)\\\">\\n                                {{place.name}}\\n                            </a>\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn btn-secondary waves-light\\\" aria-label=\\\"Close\\\" (click)=\\\"locationModal.hide()\\\" mdbWavesEffect>Lukk</button>\\n                    <button type=\\\"button\\\" class=\\\"btn btn-primary relative waves-light\\\" (click)=\\\"updateLocationOrStatus('location')\\\" mdbWavesEffect>Lagre endringer</button>\\n                </div>\\n            </div>\\n        </div>\\n    </div>\\n    <br/>\\n    <br/>\\n    <br/>\\n    <h4>Oversikt over bestillinger:</h4>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary waves-light\\\" *ngIf=\\\"!listSorted\\\" (click)=\\\"filterForEmployee()\\\" mdbWavesEffect>\\n        Filtrer etter bestillinger tildelt deg:\\n    </button>\\n    <button type=\\\"button\\\" class=\\\"btn btn-primary waves-light\\\" *ngIf=\\\"listSorted\\\" (click)=\\\"fetchOrders()\\\" mdbWavesEffect>\\n       Gå tilbake til original liste:\\n    </button>\\n    <br/>\\n    <br/>\\n    <table class=\\\"table equipmentTable\\\">\\n\\n        <!--Table head-->\\n        <thead class=\\\"blue-grey lighten-4\\\">\\n            <tr>\\n                <th>Id:</th>\\n                <th>Pris:</th>\\n                <th>Kunde id:</th>\\n                <th>Ansatt id:</th>\\n                <th>Order dato:</th>\\n            </tr>\\n        </thead>\\n        <!--Table head-->\\n\\n        <!--Table body-->\\n        <tbody>\\n            <tr *ngFor=\\\"let order of orderList\\\">\\n                <td>{{order.order_id}}</td>\\n                <td>{{order.price}}</td>\\n                <td>{{order.customer_id}}</td>\\n                <td>{{order.employee_id}}</td>\\n                <td>{{order.orderDate}}</td>\\n            </tr>\\n        </tbody>\\n        <!--Table body-->\\n    </table>\\n    <!--Table-->\\n</div>\"","module.exports = \".logginForm {\\n  width: 60%;\\n  margin: 0 auto; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport { AuthService } from '../services/auth.service';\nimport {environment} from '../../environments/environment';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styleUrls: ['./admin.component.scss']\n})\nexport class AdminComponent implements OnInit {\n  //api data\n  public equipmentList : any [];\n  public orderList : any [] = Array();\n  placesList: any[] = Array();\n\n  // scope data\n  public selectedEquipment: Object = {};\n  public selectedEquipmentName: string = \" \";\n  public selectedEquipmentStatus: string = \" \";\n  public selectedEquipmentLocation: Object = {};\n  public assignedPlaceId: number = 0;\n  public assignedSatus: string = \"\";\n  employee: boolean = true;\n  auth: boolean = false;\n  authId: number = 0;\n  listSorted = false;\n\n /*  httpOptions = { // http-headers for API\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': \"{'firstName':'John', 'lastName':'Doe'}\"\n    })\n  }; */\n\n  \n  \n  constructor(private httpClient: HttpClient, private authService: AuthService) { }\n  \n  ngOnInit() {\n    console.log(this.authService.getHash());\n    this.auth = this.authService.checkEmployment();\n    this.fetchPlaces();    \n    if(this.auth){\n      this.fetchEquipment();\n      this.fetchOrders();\n    }\n  }\n  \n  notifyUponSubmission() {\n    let validLogging = new Notification(\"Du er logget inn\", {\n      body: \"Sjekk/endre status på utstyr\"\n    });\n    setTimeout(validLogging.close.bind(validLogging), 5000);\n  }\n  \n  onSubmit(f: NgForm) { // html-form som tar i mot brukernavn og passord\n    console.log(f.value);\n    this.loggIn(f.value);\n  }\n  \n  sendMessage(name: string, employee: boolean, userId: number): void {\n    this.authService.sendMessage(\"logget inn som ansatt \" + name, employee, userId);\n  }\n  \n  loggIn(data) {\n    let loggInnUrl = environment.ApiUrl + \"/auth\"; // api logg inn url\n    let payload = { // objektet som blir sendt med http-request\n      Username: data.username,\n      Password: data.password,\n      IsEmployee: this.employee\n    }\n    console.log(payload);\n    this.httpClient.post(loggInnUrl, payload, environment.httpOptions) // http-post\n      .subscribe(\n        (data: any[]) => {\n          console.log(data);\n          this.authId = data['creds_id'];\n          this.auth = true;\n          this.notifyUponSubmission();\n          this.fetchEquipment();\n          this.fetchOrders();\n        },\n        (err) => {\n          if (err.status == 200) {\n            this.auth = true;\n          } else {\n          }\n        }\n      )\n    this.sendMessage(data.username, this.employee, data.Creds_id);\n  }\n\n  fetchEquipment(){\n    let equipmentEndpoint = environment.ApiUrl + \"/bike\";\n      this.httpClient.get(equipmentEndpoint, environment.httpOptions)\n        .subscribe(\n          (data : any) => {\n            this.equipmentList = data;\n          },\n          (error) =>{\n            console.log(error);\n          }, \n          () => {\n            console.log(\"succes\");\n          }\n    );\n  }\n  \n  fetchOrders(){\n    let orderUrl = environment.ApiUrl + \"/order\";\n    this.httpClient.get(orderUrl, environment.httpOptions)\n      .subscribe(\n        (data: any []) => {\n          this.orderList = data;\n          this.listSorted = false;\n        }\n      )\n  }\n\n  fetchPlaces() {\n    let placesUrl = environment.ApiUrl + \"/place\";\n    this.httpClient.get(placesUrl, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          console.log(data);\n          this.placesList = data;\n        },\n        error => () => {\n          console.log(\"error:\" )\n        },\n        () => {\n          console.log(\"succes for places\");\n        }\n    );\n  }\n\n  statusConfig(equipment){\n    this.selectedEquipment = Object.assign({}, equipment);\n    this.selectedEquipmentStatus = equipment.status;\n    this.selectedEquipmentName = equipment.name;\n  }\n\n  locationConfig(equipment){\n    console.log(this.placesList[this.placesList.findIndex(place => place.place_id === equipment.lastSeenOnPlace)]); \n    this.selectedEquipment = Object.assign({}, equipment);\n    this.selectedEquipmentLocation = Object.assign({}, this.placesList[this.placesList.findIndex(place => place.place_id === equipment.lastSeenOnPlace)]); \n    this.selectedEquipmentName = equipment.name;\n    console.log(this.selectedEquipmentLocation);\n  }\n\n  assignNewPlace(id: number){\n    this.assignedPlaceId = id;\n  }\n\n  assignNewStatus(status: string){\n    this.assignedSatus = status;\n  }\n\n  updateLocationOrStatus(fieldForUpdate){\n    if(fieldForUpdate == 'location'){\n      this.selectedEquipment['lastSeenOnPlace'] = this.assignedPlaceId;\n    }else{\n      this.selectedEquipment['status'] = this.assignedSatus;\n    }\n    let updateBikeUrl = environment.ApiUrl + \"/bike\" + \"/\" + this.selectedEquipment['bike_id'];\n    let payload = Object.assign({}, this.selectedEquipment);\n    console.log(payload);\n    this.httpClient.put(updateBikeUrl, payload, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          console.log(data);\n        }\n      );\n    this.updateEquipmentInView();\n  }\n\n  updateEquipmentInView(){\n      this.fetchEquipment();\n      this.fetchOrders();\n      this.fetchPlaces();\n  }\n\n  filterForEmployee(){\n    let orderForEmployeeUrl = environment.ApiUrl + \"/status\"\n    let payload = {criteria: \"employee\", id: this.authId}\n    this.httpClient.post(orderForEmployeeUrl, payload,  environment.httpOptions)\n      .subscribe(\n        (data: any []) => {\n          this.orderList = data;\n          this.listSorted = true;\n        }\n      )\n  }\n}\n","module.exports = \"<app-navbar></app-navbar>\\n\\n\\n\\n<div class=\\\"headerContainer\\\">\\n    <img src=\\\"./assets/livhead-2.jpg\\\" class=\\\"img-fluid headerImage\\\" alt=\\\"Responsive image\\\">\\n    <h1 class=\\\"headerTitle\\\">AS-Sykkelutleie</h1>\\n    <!--Card Info-->\\n    <span class=\\\"row userStatus\\\">\\n        <span class=\\\"card success-color text-center z-depth-2 col-md-3\\\">\\n            <span class=\\\"card-body\\\">\\n                <p class=\\\"white-text mb-0\\\">\\n                    Status: {{userName}}\\n                </p>\\n            </span>\\n        </span>\\n    </span>\\n    <!--/.Card Info-->\\n</div>\\n\\n<main class=\\\"main\\\">\\n    <br/>\\n    <br/>\\n    <br/>\\n    <router-outlet></router-outlet>\\n    <br/>\\n    <br/>\\n    <br/>\\n    <footer class=\\\"page-footer font-small blue pt-4 mt-4\\\">\\n\\n        <!--Footer Links-->\\n        <div class=\\\"container-fluid text-center text-md-left\\\">\\n            <div class=\\\"row\\\">\\n\\n                <!--First column-->\\n                <div class=\\\"col-md-6\\\">\\n                    <h5 class=\\\"title\\\">Sykkelutleie</h5>\\n                    <p>Sykkler og utstyr for alle anledninger</p>\\n                </div>\\n                <!--/.First column-->\\n\\n                <!--Second column-->\\n                <div class=\\\"col-md-6\\\">\\n                    <h5 class=\\\"text-uppercase\\\">Links</h5>\\n                    <ul class=\\\"list-unstyled\\\">\\n                        <li>\\n                            <a href=\\\"#!\\\">Link 1</a>\\n                        </li>\\n                        <li>\\n                            <a href=\\\"#!\\\">Link 2</a>\\n                        </li>\\n                        <li>\\n                            <a href=\\\"#!\\\">Link 3</a>\\n                        </li>\\n                        <li>\\n                            <a href=\\\"#!\\\">Link 4</a>\\n                        </li>\\n                    </ul>\\n                </div>\\n                <!--/.Second column-->\\n            </div>\\n        </div>\\n        <!--/.Footer Links-->\\n        <!--Copyright-->\\n        <div class=\\\"footer-copyright\\\">\\n            <div class=\\\"container-fluid\\\">\\n                © 2018 Copyright: Sykkelutleie AS\\n            </div>\\n        </div>\\n        <!--/.Copyright-->\\n    </footer>\\n    <!--/.Footer-->\\n</main>\"","module.exports = \".headerContainer {\\n  position: relative; }\\n\\n.userStatus {\\n  padding: 2.5%;\\n  width: 65%;\\n  position: absolute;\\n  bottom: 40%;\\n  padding-left: 2%;\\n  padding-right: 2%; }\\n\\n.headerImage {\\n  width: 100%;\\n  height: 500px;\\n  margin: 0 auto; }\\n\\n.headerTitle {\\n  padding: 2.5%;\\n  width: 65%;\\n  position: absolute;\\n  bottom: 80%;\\n  right: 0%;\\n  padding-left: 2%;\\n  padding-right: 2%;\\n  color: white; }\\n\"","import { Component} from '@angular/core';\nimport {remote, ipcRenderer} from 'electron'; //for å lage menyer filer osv.\nimport { HomeComponent } from './home/home.component';\nimport { Subscription } from 'rxjs';\nimport {AuthService} from './services/auth.service';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  subscription: Subscription;\n  public isAuthenticated:  boolean = false;\n  userName : string = \"Gjest\";\n\n\n  constructor(private authService: AuthService){\n    this.subscription = this.authService.getMessage().subscribe(\n      (message) => { \n        if(message.status){\n          console.log(message);\n          this.userName = message.text + \"som ansatt\"; \n        }\n        this.userName = message.text; \n    });\n  }\n\n  ngOnDestroy() {\n    // unsubscribe to ensure no memory leaks\n    this.subscription.unsubscribe();\n  }\n\n}\n\n\n","//Dependencies\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { MDBBootstrapModule } from 'angular-bootstrap-md';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\n\n//Components:\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './home/home.component';\nimport { EquipmentComponent } from './equipment/equipment.component';\nimport { NavbarComponent } from './navbar/navbar.component';\nimport { AdminComponent } from './admin/admin.component';\nimport { RegisterComponent } from './register/register.component';\nimport { OrderComponent } from './order/order.component';\n\n//services:\nimport {AuthService} from './services/auth.service';\nimport {OrderService} from './services/order.service';\nimport { UserComponent } from './user/user.component';\n \n\nconst appRoutes: Routes = [\n  {path: '', component: HomeComponent},\n  {path: 'equipment', component : EquipmentComponent },\n  {path: 'admin', component : AdminComponent },\n  {path: 'register', component: RegisterComponent},\n  {path: 'order', component: OrderComponent},\n  {path: 'user/:id', component: UserComponent}\n]\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HomeComponent,\n    EquipmentComponent,\n    NavbarComponent,\n    AdminComponent,\n    RegisterComponent,\n    OrderComponent,\n    UserComponent,\n  ],\n  imports: [\n    MDBBootstrapModule.forRoot(),\n    RouterModule.forRoot(\n      appRoutes,\n      {useHash: true},\n      //{ enableTracing: true } // <-- debugging purposes only\n    ),\n    BrowserModule,\n    FormsModule,\n    HttpClientModule,\n  ],\n  providers: [AuthService, OrderService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"<h4>Dersom du er ansatt, gå til /ansatte for å se utstyr</h4>\\n<div class=\\\"btn-group sorterBtn\\\" dropdown>\\n    <button dropdownToggle type=\\\"button\\\" class=\\\"btn btn-primary dropdown-toggle waves-light\\\" mdbWavesEffect>\\n        Sorter etter:\\n    </button>\\n    <div class=\\\"dropdown-menu dropdown-primary\\\">\\n        <a class=\\\"dropdown-item\\\" (click)=\\\"orderByCriteria('pris')\\\">pris per time</a>\\n        <a class=\\\"dropdown-item\\\" (click)=\\\"orderByCriteria('prisDag')\\\">pris per dag </a>\\n        <a class=\\\"dropdown-item\\\" (click)=\\\"orderByCriteria('validStatus')\\\">Tilgjengelig</a>\\n        <a class=\\\"dropdown-item\\\" (click)=\\\"orderByCriteria('invalidStatus')\\\">Ikke tilgjengelig</a>\\n    </div>\\n</div>\\n<br />\\n<hr>\\n<!--Table-->\\n<table class=\\\"table equipmentTable\\\">\\n    <!--Table head-->\\n    <thead class=\\\"blue-grey lighten-4\\\">\\n        <tr>\\n            <th>Utstyr navn:</th>\\n            <th>Type</th>\\n            <th>Tilgjengelighet:</th>\\n            <th>Status:</th>\\n            <th>pris  time:</th>\\n            <th>pris dag:</th>\\n            <th>Ramme</th>\\n            <th>Hjulstørrelse</th>\\n        </tr>\\n    </thead>\\n    <!--Table head-->\\n    <!--Table body-->\\n    <tbody>\\n        <tr *ngFor=\\\"let equipment of equipmentList; let i = index\\\">\\n            <td>{{equipment.name}}</td>\\n            <td>{{equipment.type}}</td>\\n            <td>\\n                <button \\n                type=\\\"button\\\" \\n                class=\\\"btn btn-primary relative waves-light\\\" \\n                (click)=\\\"statusModal.show(); modalTrigger(equipment.lastSeenOnPlace, equipment.name)\\\" \\n                mdbWavesEffect\\n                >\\n                    Sjekk Tilgjengelighet\\n                </button>\\n            </td>\\n            <td>{{equipment.status}}</td>\\n            <td>{{equipment.hourPrice}}</td>\\n            <td>{{equipment.dailyPrice}}</td>\\n            <td>{{equipment.frame}}</td>\\n            <td>{{equipment.wheelSize}}</td>\\n        </tr>\\n    </tbody>\\n    <!--Table body-->\\n</table>\\n<!--Table-->\\n\\n<div mdbModal #statusModal=\\\"mdb-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"mystatusModalLabel\\\" aria-hidden=\\\"true\\\" [config]=\\\"{backdrop: false, ignoreBackdropClick: true}\\\">\\n    <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header\\\">\\n                <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"statusModal.hide()\\\">\\n                    <span aria-hidden=\\\"true\\\">×</span>\\n                </button>\\n                <h4 class=\\\"modal-title w-100\\\" id=\\\"myModalLabel\\\">Status på utstyret</h4>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n                <p>Status for: {{selectedEquipmentName}}</p>\\n                <p>\\n                    Siste sett på: {{selectedPlace.name}}\\n                </p>\\n                <p> Post nummer: {{selectedPlace.postalCode}}</p>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-secondary waves-light\\\" aria-label=\\\"Close\\\" (click)=\\\"statusModal.hide()\\\" mdbWavesEffect>Lukk</button>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n\\n            \\n                                    \"","module.exports = \".equipmentTable {\\n  margin: 0 auto;\\n  width: 80%; }\\n\\n.sorterBtn {\\n  padding: 2.5%; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { AuthService } from '../services/auth.service';\nimport { NotificationService } from '../services/notification.service';\nimport { Subscription } from 'rxjs';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\n@Component({\n  selector: 'app-equipment',\n  templateUrl: './equipment.component.html',\n  styleUrls: ['./equipment.component.scss']\n})\nexport class EquipmentComponent implements OnInit {\n  public equipmentList: any[];\n  public placesList: any[];\n  public selectedPlace: Object = {};\n  public selectedEquipmentName: string = \"\";\n  userName: string = \"Gjest\";\n  subscription: Subscription;\n\n  constructor(private authService: AuthService, private notificationService: NotificationService, private httpClient: HttpClient) {\n    this.subscription = this.authService.getMessage().subscribe(\n      (message) => {\n        if (message.status) {\n          console.log(message);\n        }\n      });\n  }\n\n  ngOnInit() {\n    this.fetchPlaces();\n  }\n\n  fetchPlaces() {\n    let placesUrl = environment.ApiUrl + \"/place\";\n    this.httpClient.get(placesUrl, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          console.log(data);\n          this.placesList = data;\n        },\n        error => () => {\n          console.log(\"error:\")\n        },\n        () => {\n          this.fetchEquipment();\n          this.notificationService.notifyEquipmentRecieved();\n          console.log(\"succes for places\");\n        }\n      );\n  }\n\n  fetchEquipment() {\n    let equipmentEndpoint = environment.ApiUrl + \"/bike\";\n    this.httpClient.get(equipmentEndpoint, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          console.log(data);\n          this.equipmentList = data;\n        },\n        error => () => {\n          console.log(\"error:\")\n        },\n        () => {\n          console.log(\"succes for equipment\")\n        }\n      );\n  }\n\n  modalTrigger(index, name) {\n    this.selectedPlace = Object.assign({}, this.placesList[this.placesList.findIndex(place => place.place_id === index)]);\n    this.selectedEquipmentName = name;\n  }\n\n  orderByCriteria(criteria: string) {\n    let url = environment.ApiUrl + \"/status\";\n    let payload = {};\n    if (criteria == 'pris') {\n      payload = { criteria: \"price\" }\n    } else if (criteria == 'validStatus') {\n      payload = { criteria: \"validStatus\" }\n\n    }else if(criteria == 'prisDag'){\n      payload = {criteria: 'priceDay'}\n    }else {\n      payload = { criteria: \"invalidStatus\" }\n    }\n\n    this.httpClient.post(url, payload, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          this.equipmentList = data;\n        }\n      )\n  }\n}\n","module.exports = \"<h4 *ngIf=\\\"!auth\\\" class=\\\"HomeTittle\\\">Brukerinnlogging</h4>\\n<h4 *ngIf=\\\"auth\\\" class=\\\"HomeTittle\\\">Velkommen</h4>\\n\\n<br />\\n<div class=\\\"card text-center NewUserPanel\\\" *ngIf=\\\"!auth\\\">\\n    <div class=\\\"card-header success-color white-text\\\">\\n        Featured\\n    </div>\\n    <div class=\\\"card-body\\\">\\n        <h4 class=\\\"card-title\\\">Har du ikke bruker hos oss ennå?</h4>\\n        <p class=\\\"card-text\\\">\\n            Det er raskt og enkelt\\n        </p>\\n        <a class=\\\"btn btn-success btn-sm\\\" href=\\\"#register\\\">Gå til registrering</a>\\n    </div>\\n    <div class=\\\"card-footer text-muted success-color white-text\\\">\\n    </div>\\n</div>\\n\\n<br />\\n<form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(f)\\\" novalidate *ngIf=\\\"!auth\\\" class=\\\"logginForm\\\">\\n    <p class=\\\"h5 text-center mb-4\\\">Logg inn </p>\\n\\n  <div class=\\\"md-form\\\">\\n      <i class=\\\"fa fa-user prefix grey-text\\\"></i>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" ngModel mdbActive>\\n      <label for=\\\"logginForm\\\">Brukernavn</label>\\n  </div>\\n  \\n  <div class=\\\"md-form\\\">\\n        <i class=\\\"fa fa-certificate prefix grey-text\\\"></i>\\n        <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"password\\\" ngModel mdbActive>\\n        <label for=\\\"logginForm\\\">passord</label>\\n    </div>\\n\\n    <div class=\\\"text-center\\\">\\n        <button class=\\\"btn btn-primary\\\" mdbRippleRadius>\\n            <i class=\\\"fa fa-send mr-1\\\"></i> Logg inn</button>\\n    </div>\\n\\n</form>\\n\\n\\n<hr>\\n<br/>\\n<br/>\\n<!--Logginn Form-->\\n<div class=\\\"row\\\" *ngIf=\\\"auth\\\">\\n    <!-- Grid column -->\\n    <div class=\\\"col-md-6 col-lg-5 userCard\\\">\\n        \\n        <!--Card-->\\n        <div class=\\\"card green darken-3\\\">\\n            \\n            <!--Card image-->\\n            <div class=\\\"view\\\">\\n                <img src=\\\"./assets/downhill.jpg\\\" class=\\\"img-fluid\\\" alt=\\\"photo\\\">\\n                <a href=\\\"#\\\">\\n                    <div class=\\\"mask rgba-white-slight\\\"></div>\\n                </a>\\n            </div>\\n            \\n            <!--Card content-->\\n            <div class=\\\"card-body text-center\\\">\\n                <!--Title-->\\n                <h4 class=\\\"card-title white-text\\\">{{message}}</h4>\\n                <!--Text-->\\n                <p class=\\\"card-text white-text\\\">Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto vitae.</p>\\n                <button class=\\\"btn btn-primary waves-light\\\" (click)=\\\"redirectUser('history')\\\" mdbRippleRadius>Se ordrehistorikken din:</button>\\n                <button class=\\\"btn btn-primary waves-light\\\" (click)=\\\"redirectUser('order')\\\" mdbRippleRadius>Gå til en ny bestilling:</button>\\n                </div>\\n\\n            </div>\\n            <!--/.Card-->\\n    \\n        </div>\\n        <!-- Grid column -->\\n    \\n\\n   \\n</div>\"","module.exports = \".NewUserPanel {\\n  width: 60%;\\n  margin: 0 auto; }\\n\\n.HomeTittle {\\n  text-align: center; }\\n\\n.logginForm {\\n  width: 60%;\\n  margin: 0 auto; }\\n\\n.userCard {\\n  margin: 0 auto; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\n\nimport { AuthService } from '../services/auth.service';\nimport { NotificationService } from '../services/notification.service';\nimport {environment} from '../../environments/environment';\n\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\n@NgModule({\n  imports: [\n    BrowserModule,\n  ],\n})\n\nexport class HomeComponent implements OnInit {\n  message: string;\n  employee: boolean = false;\n  auth: boolean = false; // sjekker om bruker er logget inn (false by default)\n\n\n  constructor(private httpClient: HttpClient, private authService: AuthService, private router: Router, private notificationService : NotificationService) { }\n\n  ngOnInit() {\n    Notification.requestPermission().then((result) => {\n    });\n    if(this.authService.getUserCredentials()){\n      this.auth = true;\n    }\n  }\n\n  sendMessage(name: string, employee: boolean, userId: number): void {\n    this.authService.sendMessage(\"logged in as user \" + name, employee, userId);\n  }\n\n  onSubmit(f: NgForm) { // html-form som tar i mot brukernavn og passord\n    let inputData = f.value;\n    this.message = inputData.username;\n    if(!inputData.username || !inputData.password){\n      this.notificationService.notifyInvalidCredentials();\n    }else{\n      this.loggIn(inputData);\n    }\n  }\n\n  loggIn(data) {\n    let payload = { // objektet som blir sendt med http-request\n      Username: data.username,\n      Password: data.password,\n      IsEmployee: this.employee\n    }\n    console.log(payload);\n    let authUrl = environment.ApiUrl + \"/auth\";\n    this.httpClient.post(authUrl, payload, environment.httpOptions)\n    .subscribe(\n      (data) =>{\n        if(data['creds_id'] && data['password'] && data['username']){\n          this.auth = true;\n          this.notificationService.notifyUponSubmission();\n          this.sendMessage(data['username'], this.employee, data['creds_id']);\n        }\n        (error)=>{\n          this.notificationService.alertApiError(error);\n\n        }\n        }\n    );\n  }\n\n  redirectUser(route){\n    if(route == 'history'){\n      this.router.navigate(['/user'+ '/' + this.authService.getId()]);\n    }else{\n      this.router.navigate(['/order']);\n    }\n  }\n}\n\n","module.exports = \"<!--Navbar-->\\n<mdb-navbar SideClass=\\\"navbar navbar-expand-lg navbar-dark indigo\\\">\\n  <!-- Navbar brand -->\\n  <logo><a class=\\\"navbar-brand\\\" href=\\\"#\\\">Sykkelutleie</a></logo>\\n  <!-- Collapsible content -->\\n  <links>\\n      <!-- Links -->\\n      <ul class=\\\"navbar-nav mr-auto\\\">\\n        <li class=\\\"nav-item waves-light\\\" mdbRippleRadius>\\n            <a class=\\\"nav-link\\\" href=\\\"#\\\" >Home</a>\\n        </li>\\n        <li class=\\\"nav-item waves-light\\\" mdbRippleRadius>\\n            <a class=\\\"nav-link\\\" href=\\\"#equipment\\\">Ustyr</a>\\n        </li>\\n        <li class=\\\"nav-item waves-light\\\" mdbRippleRadius>\\n            <a class=\\\"nav-link\\\" href=\\\"#admin\\\">Ansatte</a>\\n        </li>\\n        <li class=\\\"nav-item waves-light\\\" mdbRippleRadius>\\n            <a class=\\\"nav-link\\\" href=\\\"#order\\\">Bestille utstyr</a>\\n        </li>\\n        <li class=\\\"nav-item waves-light\\\" mdbRippleRadius>\\n            <a class=\\\"nav-link\\\" (click)=\\\"loggOff()\\\">Logg ut</a>\\n        </li>\\n      </ul>\\n      <!-- Links -->\\n  </links>\\n  <!-- Collapsible content -->\\n</mdb-navbar>\\n<!--/.Navbar-->\\n          \"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '../services/auth.service';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n  message: string;\n  constructor(private authService: AuthService) {\n  }\n\n  ngOnInit() {\n  }\n\n  loggOff() : void {\n    if(window['process']){\n      console.log(\"running electron\");\n    }else{\n      window.location.reload();\n    }\n  }\n}\n","module.exports = \"<h4>Husk å fylle ut alle feltene før du sender bestillingen</h4>\\n<div class=\\\"row\\\">\\n    <div class=\\\"orderInputFields col-md-6\\\">\\n\\n        <p>Er det fler som skal ha utstyr?</p>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary waves-light\\\" (click)=\\\"multiplePeople('yes')\\\" mdbWavesEffect>Ja</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary waves-light\\\" (click)=\\\"multiplePeople('no')\\\" mdbWavesEffect>Nei</button>\\n\\n        <h5 *ngIf=\\\"groups\\\">Antall Personer:</h5>\\n        <div class=\\\"btn-group\\\" *ngIf=\\\"groups\\\">\\n            <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"personModel\\\" (click)=\\\"addPerson(1)\\\" mdbRadio=\\\"1\\\" mdbWavesEffect>\\n                1\\n            </label>\\n            <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"personModel\\\" (click)=\\\"addPerson(2)\\\" mdbRadio=\\\"2\\\" mdbWavesEffect>\\n                2\\n            </label>\\n            <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"personModel\\\" (click)=\\\"addPerson(3)\\\" mdbRadio=\\\"3\\\" mdbWavesEffect>\\n                3\\n            </label>\\n            <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"personModel\\\" (click)=\\\"addPerson(4)\\\" mdbRadio=\\\"4\\\" mdbWavesEffect>\\n                4\\n            </label>\\n            <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"personModel\\\" (click)=\\\"addPerson(5)\\\" mdbRadio=\\\"5\\\" mdbWavesEffect>\\n                5\\n            </label>\\n            <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"personModel\\\" (click)=\\\"addPerson(6)\\\" mdbRadio=\\\"6\\\" mdbWavesEffect>\\n                6\\n            </label>\\n        </div>\\n        <br/>\\n        <br/>\\n        <div>\\n            <p>Dato for bestilling:</p>\\n            <input mdbInputDirective type=\\\"date\\\" id=\\\"form1\\\" [(ngModel)]=\\\"dateModel\\\" mdbActive  (change)=\\\"setOrderDate()\\\" class=\\\"form-control\\\">\\n        </div>\\n\\n        <br/>\\n        <br/>\\n        <p>Skal dere leie i timer eller dager?</p>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary waves-light\\\" (click)=\\\"daysOrHours('hours')\\\" mdbWavesEffect>Timer</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-primary waves-light\\\" (click)=\\\"daysOrHours('days')\\\" mdbWavesEffect>Dager</button>\\n\\n        <br/>\\n        <br/>\\n        <div *ngIf=\\\"days\\\">\\n\\n            <h5>Antall dager:</h5>\\n            <div class=\\\"btn-group\\\">\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"dayModel\\\" (click)=\\\"addDays(1)\\\" mdbRadio=\\\"1\\\" mdbWavesEffect>\\n                    1\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"dayModel\\\" (click)=\\\"addDays(2)\\\" mdbRadio=\\\"2\\\" mdbWavesEffect>\\n                    2\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"dayModel\\\" (click)=\\\"addDays(3)\\\" mdbRadio=\\\"3\\\" mdbWavesEffect>\\n                    3\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"dayModel\\\" (click)=\\\"addDays(4)\\\" mdbRadio=\\\"4\\\" mdbWavesEffect>\\n                    4\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"dayModel\\\" (click)=\\\"addDays(5)\\\" mdbRadio=\\\"5\\\" mdbWavesEffect>\\n                    5\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"dayModel\\\" (click)=\\\"addDays(6)\\\" mdbRadio=\\\"6\\\" mdbWavesEffect>\\n                    6\\n                </label>\\n            </div>\\n        </div>\\n        <div *ngIf=\\\"hours\\\">\\n            <h5>Antall timer:</h5>\\n            <div class=\\\"btn-group\\\">\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"hourModel\\\" (click)=\\\"addHour(1)\\\" mdbRadio=\\\"1\\\" mdbWavesEffect>\\n                    1\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"hourModel\\\" (click)=\\\"addHour(2)\\\" mdbRadio=\\\"2\\\" mdbWavesEffect>\\n                    2\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"hourModel\\\" (click)=\\\"addHour(3)\\\" mdbRadio=\\\"3\\\" mdbWavesEffect>\\n                    3\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"hourModel\\\" (click)=\\\"addHour(4)\\\" mdbRadio=\\\"4\\\" mdbWavesEffect>\\n                    4\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"hourModel\\\" (click)=\\\"addHour(5)\\\" mdbRadio=\\\"5\\\" mdbWavesEffect>\\n                    5\\n                </label>\\n                <label class=\\\"btn btn-primary waves-light\\\" [(ngModel)]=\\\"hourModel\\\" (click)=\\\"addHour(6)\\\" mdbRadio=\\\"6\\\" mdbWavesEffect>\\n                    6\\n                </label>\\n            </div>\\n        </div>\\n        <br />\\n        <br />\\n        <div class=\\\"btn-group\\\" dropdown>\\n            <button dropdownToggle type=\\\"button\\\" class=\\\"btn btn-primary dropdown-toggle waves-light\\\" mdbWavesEffect>\\n                <i class=\\\"fa fa-plus-circle\\\" aria-hidden=\\\"true\\\"></i>\\n                Type sykkel\\n            </button>\\n\\n            <div class=\\\"dropdown-menu dropdown-primary\\\">\\n                <a class=\\\"dropdown-item\\\" *ngFor=\\\"let bike of bikeEquipmnet\\\" (click)=\\\"addEquipOrBike(bike, 'bike')\\\">{{bike.name}}</a>\\n            </div>\\n        </div>\\n        <div class=\\\"btn-group\\\" dropdown>\\n            <button dropdownToggle type=\\\"button\\\" class=\\\"btn btn-primary dropdown-toggle waves-light\\\" mdbWavesEffect>\\n                <i class=\\\"fa fa-plus-circle\\\" aria-hidden=\\\"true\\\"></i>\\n                Type utstyr for denne sykkelen\\n            </button>\\n\\n            <div class=\\\"dropdown-menu dropdown-primary\\\">\\n                <a class=\\\"dropdown-item\\\" *ngFor=\\\"let equipment of nonBikeEquipment\\\" (click)=\\\"addEquipOrBike(equipment, 'equipment')\\\">{{equipment.name}}</a>\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n\\n\\n    <!--Panel-->\\n    <div class=\\\"card card-body col-md-5 orderSummary\\\">\\n        <h4 class=\\\"card-title\\\">Nåværende bestilling</h4>\\n        <p>bestilling for: {{personModel}} person(er)</p>\\n        <p *ngIf=\\\"hours\\\">bestilling for: {{hourModel}} timer</p>\\n        <p *ngIf=\\\"days\\\">bestilling for: {{dayModel}} dager</p>\\n        <p>Utstyr:</p>\\n        <ul *ngFor=\\\"let equipment of selectedEquipment\\\">\\n            <li>{{equipment.name}}, {{equipment.type}},\\n                <span *ngIf=\\\"days\\\">pris: {{equipment.dailyPrice}}</span>\\n                <span *ngIf=\\\"hours\\\">pris: {{equipment.hourPrice}}</span>\\n            </li>\\n        </ul>\\n        <p>Sykkel:</p>\\n        <ul *ngFor=\\\"let bike of selectedBike\\\">\\n            <li>{{bike.name}}, {{bike.type}},\\n                <span *ngIf=\\\"days\\\">pris: {{bike.dailyPrice}}</span>\\n                <span *ngIf=\\\"hours\\\">pris: {{bike.hourPrice}}</span>\\n            </li>\\n        </ul>\\n        <br/>\\n        <p>Total pris:</p>\\n        <p>{{totalPrice}}</p>\\n    </div>\\n    <!--/.Panel-->\\n    <hr>\\n    <button class=\\\"btn btn-primary orderSubmit\\\" (click)=\\\"submitOrder()\\\"> Sende bestilling </button>\\n</div>\"","module.exports = \".orderInputFields {\\n  padding: 2.5%; }\\n\\n.orderSummary {\\n  padding: 2.5%; }\\n\\n.orderSubmit {\\n  margin: 0 auto; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Subscription } from 'rxjs';\n\nimport { AuthService } from '../services/auth.service';\nimport { NotificationService } from '../services/notification.service';\nimport {CommonApiCalls} from '../services/commonApiCalls.service';\nimport { environment } from '../../environments/environment';\nimport { NgForm } from '@angular/forms';\n\n@Component({\n  selector: 'app-order',\n  templateUrl: './order.component.html',\n  styleUrls: ['./order.component.scss']\n})\nexport class OrderComponent implements OnInit {\n  //scope variables\n  public personModel: string = \"1\";\n  public daysModel: string = \"1\";\n  public hourModel: string = \"1\";\n  public dateModel: Date;\n  public groups: boolean;\n  public hours: boolean;\n  public days: boolean;\n  public employee: number;\n  public userId: number;\n\n  //api data:\n  public equipmentList: any[];\n  public nonBikeEquipment: any[];\n  public bikeEquipmnet: any[];\n  public employess: any[];\n  public orderId: any;\n\n  public serviceDataTest: any[];\n\n  //payload variables for creating order:\n  public selectedEquipment: any[] = Array();\n  public selectedBike: any[] = Array();\n  public totalPrice: number = 0;\n\n  userName: string = \"Gjest\";\n  subscription: Subscription;\n\n\n  constructor(private authService: AuthService, private notificationService: NotificationService, private commonApiCalls: CommonApiCalls, private httpClient: HttpClient) { }\n\n  ngOnInit() {\n    this.fetchEquipment();\n    this.getEmployees();\n    this.userId = this.authService.getId();\n    this.serviceDataTest = this.commonApiCalls.fetchEquipment();\n    console.log(this.serviceDataTest);\n\n  }\n\n  fetchEquipment() {\n    let equipmentEndpoint = environment.ApiUrl + \"/bike\";\n    this.httpClient.get(equipmentEndpoint, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          this.equipmentList = data;\n        },\n        error => () => {\n        },\n        () => {\n          this.filterEquipment(this.equipmentList);\n        }\n      );\n  }\n\n  filterEquipment(list) {\n    this.nonBikeEquipment = list.filter((element) => {\n      return element.type != \"Sykkel\" && element.status == \"klar\";\n    });\n    this.bikeEquipmnet = list.filter((element) => {\n      return element.type == \"Sykkel\" && element.status == \"klar\";\n    });\n  }\n\n  getEmployees() {\n    let EmploymentUrl = environment.ApiUrl + \"/employee\";\n    this.httpClient.get(EmploymentUrl, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          this.employess = data;\n        },\n        error => () => {\n          console.log(\"error:\")\n        },\n        () => {\n          this.employee = Math.floor((Math.random() * this.employess.length) + 1);\n        }\n      );\n  }\n\n  addPerson(numOfPeople) {\n    this.personModel = numOfPeople.toString();\n    return numOfPeople;\n  }\n\n  addDays(numOfDays) {\n    this.daysModel = numOfDays.toString();\n    this.determineDate();\n    return numOfDays;\n  }\n\n  addHour(numOfHours) {\n    this.hourModel = numOfHours.toString();\n    this.determineDate();\n    return numOfHours;\n  }\n\n  setOrderDate(){\n    console.log(this.dateModel);\n  }\n\n  daysOrHours(choice) {\n    if (choice == 'hours') {\n      this.hours = true;;\n      this.days = false;\n    } else {\n      this.hours = false;\n      this.days = true;\n    }\n  }\n\n  multiplePeople(choice) {\n    if (choice == 'yes') {\n      this.groups = true;\n    } else {\n      this.groups = false;\n      this.personModel = \"1\";\n    }\n  }\n\n  addEquipOrBike(item, dropdown) {\n    if(this.selectedBike.includes(item) || this.selectedEquipment.includes(item)){\n      this.notificationService.notifyInvalidEquipmentAdded();\n      return;\n    }\n    if (dropdown == 'bike') {\n      this.selectedBike.push(item);\n    } else {\n      this.selectedEquipment.push(item);\n    }\n  }\n  \n  checkCredentials() {\n    this.userName = this.authService.getUserCredentials();\n  }\n\n  getDayOrHours(): string {\n    if (this.hours) {\n      return \"hourPrice\";\n    } else {\n      return \"dailyPrice\";\n    }\n  }\n  \n  calculatePrice() {\n    let price = this.getDayOrHours();\n    try{\n      this.selectedBike.forEach(element => {\n          let elementPrice : number = element[price];\n          this.totalPrice = this.totalPrice + elementPrice;\n      });\n      this.selectedEquipment.forEach(element => {\n        let elementPrice : number = element[price];\n        this.totalPrice = this.totalPrice + elementPrice;\n      });\n    }catch(e){\n      console.log(e);\n    }\n    \n  }\n\n  determineDate(): Date{\n    let orderDate = new Date();\n    console.log(this.dateModel);\n    console.log(orderDate);\n    if(this.hours){\n      orderDate.setUTCHours(orderDate.getHours() + parseInt(this.hourModel));\n      console.log(orderDate);\n      return orderDate;\n    }else{\n      orderDate.setDate(orderDate.getDate() + parseInt(this.daysModel));\n      console.log(orderDate);\n      return orderDate;\n    }\n  }\n\n  submitOrder() {\n    if(this.selectedBike.length == 0){\n      this.notificationService.notifyInvalidOrderData();\n      return;\n    }\n    let createOrderUrl = environment.ApiUrl + \"/order\";\n    this.checkCredentials();\n    if (this.userName == 'Gjest' || !this.userName) {\n      this.notificationService.notifyInvalidOrder();\n    } else {\n      this.getDayOrHours();\n      this.calculatePrice();\n      let payload = {\n        Price: this.totalPrice,\n        IsGroupOrder: this.groups ? 1 : 0,\n        Customer_id: this.userId,\n        Employee_id: this.employee,\n        OrderDate: this.dateModel,\n        IsAvailableFrom: this.dateModel,\n        MustBeDeliveredBefore: this.determineDate()\n      }\n      console.log(payload);\n      this.httpClient.post(createOrderUrl, payload, environment.httpOptions)\n        .subscribe(\n          (data: any[]) => {\n            this.orderId = data[0].order_id;\n            console.log(this.orderId);\n            this.linkEquipmentToOrder();\n          }\n        );\n    }\n  }\n\n\n\n  linkEquipmentToOrder(){\n    let equipmentAndOrderUrl = environment.ApiUrl + \"/bikeandorder\";\n    this.selectedBike.forEach(element => {\n      let payload = {\n        Bike_Id: element['bike_id'],\n        Order_Id: this.orderId\n      }\n      this.httpClient.post(equipmentAndOrderUrl, payload, environment.httpOptions)\n        .subscribe(\n          (data: any []) =>{\n            console.log(data);\n          }\n        )\n    });\n\n    this.selectedEquipment.forEach(element => {\n      let payload = {\n        Bike_Id: element['bike_id'],\n        Order_Id: this.orderId\n      }\n      this.httpClient.post(equipmentAndOrderUrl, payload, environment.httpOptions)\n        .subscribe(\n          (data: any []) =>{\n            console.log(data);\n          }\n        )\n    });\n    this.notificationService.notifyOrderCompleted(this.orderId);\n    this.updateStatusOfRentedEquipment();\n  }\n\n  updateStatusOfRentedEquipment(){\n    this.selectedEquipment.forEach(element => {\n      let updateUrl = environment.ApiUrl + \"/bike\" + \"/\" + element['bike_id'];\n      element['status'] = \"utleid\";\n      let payload = {\n        Bike_id: element['bike_id'],\n        Name: element['name'],\n        Type: element['type'],\n        DailyPrice: element['dailyPrice'],\n        HourPrice: element['hourPrice'],\n        EquipmentCode: element['equipmentCode'],\n        LastSeenOnPlace: element['lastSeenOnPlace'],\n        BelongsToPlace: element['belongsToPlace'],\n        WheelSize: element['wheelSize'],\n        Frame: element['frame'],\n        STATUS: element['status']\n      }\n      this.httpClient.put(updateUrl, payload, environment.httpOptions)\n        .subscribe(\n          (data: any []) =>{\n            console.log(data);\n          }\n        )\n    });\n    this.selectedBike.forEach(element => {\n      let updateUrl = environment.ApiUrl + \"/bike\" + \"/\" + element['bike_id'];\n      element['status'] = \"utleid\";\n      let payload = {\n        Bike_id: element['bike_id'],\n        Name: element['name'],\n        Type: element['type'],\n        DailyPrice: element['dailyPrice'],\n        HourPrice: element['hourPrice'],\n        EquipmentCode: element['equipmentCode'],\n        LastSeenOnPlace: element['lastSeenOnPlace'],\n        BelongsToPlace: element['belongsToPlace'],\n        WheelSize: element['wheelSize'],\n        Frame: element['frame'],\n        STATUS: element['status']\n      }\n      this.httpClient.put(updateUrl, payload, environment.httpOptions)\n        .subscribe(\n          (data: any []) =>{\n            console.log(data);\n          }\n        )\n    });\n    this.wipeProcessedOrderSelections();\n  }\n\n  wipeProcessedOrderSelections(){\n    this.selectedBike = [];\n    this.selectedEquipment = [];\n    this.hours = false;\n    this.days = false;\n    this.groups = false;\n  }\n}\n","module.exports = \"<div class=\\\"row\\\">\\n  <div class=\\\"col-md-6\\\">\\n\\n    <div class=\\\"btn-group\\\" dropdown>\\n      <button dropdownToggle type=\\\"button\\\" class=\\\"btn btn-primary dropdown-toggle waves-light\\\" mdbWavesEffect>\\n        Velg område:\\n    </button>\\n    \\n    <div class=\\\"dropdown-menu dropdown-primary\\\">\\n      <a class=\\\"dropdown-item\\\" *ngFor=\\\"let place of placesList\\\" (click)=\\\"addPlace(place)\\\">{{place.name}}</a>\\n    </div>\\n  </div>\\n  \\n  <form #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(f)\\\" novalidate class=\\\"col-md-6 padd\\\">\\n    <div class=\\\"md-form\\\">\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" mdbActive ngModel name=\\\"FirstName\\\">\\n      <label for=\\\"form1\\\">Fornavn:</label>\\n    </div>\\n    \\n    <div class=\\\"md-form\\\">\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" mdbActive ngModel name=\\\"LastName\\\">\\n      <label for=\\\"form1\\\">Etternavn:</label>\\n    </div>\\n    \\n    <div class=\\\"md-form\\\">\\n      <input type=\\\"tel\\\" class=\\\"form-control\\\" mdbActive ngModel name=\\\"Phone\\\">\\n      <label for=\\\"form1\\\">Telefon</label>\\n    </div>\\n    \\n    <div class=\\\"md-form\\\">\\n      <input type=\\\"email\\\" class=\\\"form-control\\\" mdbActive ngModel name=\\\"Email\\\">\\n      <label for=\\\"form1\\\">Brukernavn</label>\\n    </div>\\n    \\n    \\n    <div class=\\\"md-form\\\">\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" mdbActive ngModel name=\\\"Password\\\">\\n      <label for=\\\"form1\\\">Passord</label>\\n    </div>\\n    \\n    <div class=\\\"md-form\\\">\\n      <input type=\\\"password\\\" class=\\\"form-control\\\" mdbActive ngModel name=\\\"secondPassword\\\">\\n      <label for=\\\"form1\\\">Gjenta passord</label>\\n    </div>\\n    \\n    <div class=\\\"text-center\\\">\\n      <button class=\\\"btn btn-primary\\\" mdbRippleRadius>\\n        <i class=\\\"fa fa-send mr-1\\\"></i> Registrer</button>\\n      </div>\\n    </form>\\n  </div>\\n  <div class=\\\"col-md-6\\\">\\n    <div class=\\\"card-deck\\\">\\n      <!--Panel-->\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n          <h5 class=\\\"card-title\\\">Til informasjon: </h5>\\n          <p class=\\\"card-text\\\">Alle feltene må være fylt ut!</p>\\n        </div>\\n      </div>\\n      <!--/.Panel-->\\n\\n      <!--Panel-->\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-body\\\">\\n          <h5 class=\\\"card-title\\\">Valgt plass:</h5>\\n          <p class=\\\"card-text\\\">\\n            {{place.name}}\\n          </p>\\n          <p class=\\\"card-text\\\">\\n            post nummer: {{place.postalCode}}\\n          </p>\\n          <p class=\\\"card-text\\\">\\n            <small class=\\\"text-muted\\\">Last updated {{date}}</small>\\n          </p>\\n        </div>\\n      </div>\\n      <!--/.Panel-->\\n\\n    </div>\\n\\n  </div>\"","module.exports = \".padd {\\n  padding: 5%; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport { NgForm } from '@angular/forms';\nimport {NotificationService} from '../services/notification.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\n\nexport class RegisterComponent implements OnInit {\n  public placesList: any[];\n  public place: string;\n  public date = new Date();\n\n\n  constructor(private httpClient: HttpClient, private notificationService : NotificationService) { }\n\n  ngOnInit() {\n    this.fetchPlaces();\n  }\n\n  fetchPlaces() {\n    let placesUrl = environment.ApiUrl + \"/place\";\n    this.httpClient.get(placesUrl, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          console.log(data);\n          this.placesList = data;\n        },\n        error => () => {\n          console.log(\"error:\")\n        },\n        () => {\n          console.log(\"succes for places\");\n        }\n      );\n  }\n\n  addPlace(item) {\n    this.place = item;\n    console.log(this.place);\n    this.date = new Date();\n  }\n\n  onSubmit(f: NgForm) { // html-form som tar i mot brukernavn og passord\n    console.log(f.value);\n    let input = f.value;\n    if(input.Password == input.secondPassword){\n      this.preparePayload(f.value);\n    }else{\n      //Todo: legg til notification-service\n      this.notificationService.notifyInvalidUserCreation();\n    }\n    \n  }\n\n  preparePayload(formData) {\n    let payload = {\n      FirstName: formData.FirstName,\n      LastName: formData.LastName,\n      Phone: formData.Phone,\n      Email: formData.Email,\n      Password: formData.Password,\n      Location: this.place['place_id'],\n    }\n    console.log(payload);\n    this.submitCustomer(payload)\n  }\n  submitCustomer(payload) {\n    let newCustomerUrl = environment.ApiUrl + \"/customer\";\n    this.httpClient.post(newCustomerUrl, payload, environment.httpOptions)\n      .subscribe(\n        (data: any[]) => {\n          console.log(data);\n        },\n        error => () => {\n          console.log(\"error:\")\n        },\n        () => {\n          this.notificationService.notifyCustomerCreated();\n        }\n      );\n  }\n}\n","//source: http://jasonwatmore.com/post/2016/12/01/angular-2-communicating-between-components-with-observable-subject\n\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Subject } from 'rxjs/Subject';\n//import * as shajs from 'sha.js/index.js';\n\n@Injectable()\nexport class AuthService {\n\n    constructor() { }\n    private subject = new Subject<any>();\n    public message: string;\n    public employee: boolean;\n    public userId: number;\n\n    sendMessage(message: string, employee: boolean, userId: number) {\n        this.message = message;\n        this.employee = employee;\n        this.userId = userId;\n        this.subject.next({\n            text: message,\n            status: employee\n        });\n    }\n\n    clearMessage() {\n        this.message = null;\n        this.employee = null;\n        this.userId = null;\n    }\n\n    getUserCredentials() {\n        return this.message;\n    }\n\n    checkEmployment() {\n        return this.employee;\n    }\n\n    getId(): number {\n        return this.userId;\n    }\n\n    getMessage(): Observable<any> {\n        return this.subject.asObservable();\n    }\n    \n    getHash(){\n        let hash = \"hei\";\n        //shajs(\"SHA-512\", \"TEXT\");\n        return hash; \n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from '../../environments/environment';\n\n@Injectable({\n    providedIn: 'root'\n})\n\nexport class CommonApiCalls {\n    public equipmentList: any[] = new Array();\n    public placesList: any[] = new Array();\n    constructor(private httpClient: HttpClient) { }\n\n    fetchEquipment(): any[] {\n        let equipmentEndpoint = environment.ApiUrl + \"/bike\";\n        this.httpClient.get(equipmentEndpoint, environment.httpOptions)\n            .subscribe(\n                (data: any[]) => {\n                    this.equipmentList.push(data);\n                }\n            );\n        console.log(this.equipmentList);\n        return this.equipmentList;\n    }\n\n    fetchPlaces(): any[] {\n        let placesUrl = environment.ApiUrl + \"/place\";\n        this.httpClient.get(placesUrl, environment.httpOptions)\n            .subscribe(\n                (data: any[]) => {\n                    console.log(data);\n                    this.placesList.push(data);\n                }\n            );\n        console.log(this.placesList);\n        return this.placesList;\n    }\n}","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n\n  constructor() { }\n\n  notifyInvalidOrder() {\n    let error = new Notification(\"Feil:\", {\n      body: \"Du kan ikke lagen en bestilling uten å være logget inn\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(error.close.bind(error), 8000);\n  }\n\n  notifyEquipmentRecieved() {\n    let validLogging = new Notification(\"Utstyr fra databasen er mottat\", {\n      body: \"Her har du oversikt over alt utstyret vi kan tilby\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(validLogging.close.bind(validLogging), 8000);\n  }\n\n  notifyUponSubmission() {\n    let validLogging = new Notification(\"Du er logget inn\", {\n      body: \"Nå kan du velge område og tidsrom du vil leie utstyr i\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(validLogging.close.bind(validLogging), 8000);\n  }\n\n  notifyCustomerCreated(){\n    let validCreation = new Notification(\"Brukeren er lagt\", {\n      body: \"Nå kan du leie utstyr\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(validCreation.close.bind(validCreation), 8000);\n  }\n\n  notifyOrderCompleted(orderId: string){\n    let validCreation = new Notification(\"Bestilling lagret\", {\n      body: \"med id: \" + orderId,\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(validCreation.close.bind(validCreation), 8000);\n  }\n\n  notifyInvalidCredentials(){\n    let validCreation = new Notification(\"Ugyldig logg inn\", {\n      body: \"Vi finner ikke denne brukeren i databasen\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(validCreation.close.bind(validCreation), 8000);\n  }\n\n  notifyInvalidUserCreation(){\n    let validCreation = new Notification(\"Ugyldig registrering\", {\n      body: \"passordene stemmer ikke over ens\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(validCreation.close.bind(validCreation), 8000);\n  }\n\n  alertApiError(error: any[]){\n    let errorMessage = new Notification(\"Feil:\", {\n      body: \"\" + error.toString(), \n      icon:'../assets/icons/bike-21-512.png'\n    })\n  }\n\n  notifyOrderRecordsRecieved(recordLength: number){\n    let orderRecords = new Notification(\"Bestillinger er hentet\", {\n      body: \"Vi fant \" + recordLength + \" bestilinger for denne brukeren\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(orderRecords.close.bind(orderRecords), 8000);\n  }\n\n  notifyInvalidEquipmentAdded(){\n    let inValidCreation = new Notification(\"Feil i bestillling\", {\n      body: \"Du har allerede lagt til denne sykkelen eller utstyret\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(inValidCreation.close.bind(inValidCreation), 8000);\n  }\n\n  notifyInvalidOrderData(){\n    let inValidOrderData = new Notification(\"Feil i bestillling\", {\n      body: \"Du må ha med minimum en sykkel i bestillingen din\",\n      icon: '../assets/icons/bike-21-512.png'\n    });\n    setTimeout(inValidOrderData.close.bind(inValidOrderData), 8000);\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class OrderService {\n\n  constructor() { }\n\n}\n","module.exports = \"\\n<!--Section: Blog v.1-->\\n<section class=\\\"py-4 text-center text-lg-left orderSection\\\">\\n    <!--Grid row-->\\n    <div class=\\\"row pb-5\\\">\\n\\n        <!--Grid column-->\\n        <div class=\\\"col-lg-4 col-xl-4 pb-2\\\">\\n            <!--Featured image-->\\n            <div class=\\\"view overlay rounded z-depth-2 waves-light\\\" mdbWavesEffect>\\n                <img src=\\\"./assets/bike.jpg\\\" alt=\\\"Thrid image in the blog listing.\\\" class=\\\"img-fluid\\\">\\n                <a>\\n                    <div class=\\\"mask rgba-white-slight\\\"></div>\\n                </a>\\n            </div>\\n        </div>\\n        <!--Grid column-->\\n\\n        <!--Grid column-->\\n        <div class=\\\"col-lg-7 col-xl-7\\\">\\n            <!--Excerpt-->\\n            <a href=\\\"\\\" class=\\\"indigo-text\\\">\\n                <h6 class=\\\"font-weight-bold pb-1\\\">\\n                    <i class=\\\"fa fa-bicycle\\\"></i> Sykkler og utstyr</h6>\\n            </a>\\n            <h3 class=\\\"mb-4 font-weight-bold dark-grey-text\\\">\\n                <strong>Her finner du alle de tidligere bestillingene fra oss</strong>\\n            </h3>\\n            <p>Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur\\n                magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro qui dolorem ipsum quia sit\\n                amet, consectetur.</p>\\n            <p>by\\n                <a>\\n                    <strong>Sykkelutleie</strong>\\n                </a>, {{date}}</p>\\n        </div>\\n        <!--Grid column-->\\n\\n    </div>\\n    <!--Grid row-->\\n\\n</section>\\n<!--Section: Blog v.1-->\\n\\n<table class=\\\"table orderSection\\\">\\n    <thead class=\\\"blue-grey lighten-4 orderSection\\\">\\n        <tr>\\n            <th>Ordre id:</th>\\n            <th>Pris:</th>\\n            <th>Ordre dato:</th>\\n        </tr>\\n    </thead>\\n    <tbody class=\\\"orderSection\\\" >\\n      <tr *ngFor=\\\"let order of orderRecords; let i = index\\\">\\n        <td>\\n          {{order.order_id}}\\n          <button \\n                type=\\\"button\\\" \\n                class=\\\"btn btn-primary relative waves-light\\\" \\n                (click)=\\\"statusModal.show(); modalTrigger(i)\\\" \\n                mdbWavesEffect\\n                >\\n                    Mer informasjon:\\n                </button>\\n\\n        </td>\\n        <td>{{order.price}}</td>\\n        <td>{{order.orderDate}}</td>\\n      </tr>\\n    </tbody>\\n</table>\\n\\n<div mdbModal #statusModal=\\\"mdb-modal\\\" class=\\\"modal fade\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"mystatusModalLabel\\\" aria-hidden=\\\"true\\\" [config]=\\\"{backdrop: false, ignoreBackdropClick: true}\\\">\\n    <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n        <div class=\\\"modal-content\\\">\\n            <div class=\\\"modal-header\\\">\\n                <button type=\\\"button\\\" class=\\\"close pull-right\\\" aria-label=\\\"Close\\\" (click)=\\\"statusModal.hide(); clearEquipmentInfo()\\\">\\n                    <span aria-hidden=\\\"true\\\">×</span>\\n                </button>\\n                <h4 class=\\\"modal-title w-100\\\" id=\\\"myModalLabel\\\">Utstyr for denne bestillingen</h4>\\n            </div>\\n            <div class=\\\"modal-body\\\">\\n                <ul *ngFor=\\\"let bike of equipmentRecordForOrder\\\">\\n                    <li>\\n                        <span>Navn: {{bike.name}}</span>\\n                        &ensp; &ensp;\\n                        <span>Type: {{bike.type}}</span>\\n                        &ensp; &ensp;\\n                        <span>Status: {{bike.status}}</span>\\n                        &ensp; &ensp;\\n                    </li>\\n                </ul>\\n                <p>Trukk enten på Lukk eller x når du skal ut av vinduet</p>\\n            </div>\\n            <div class=\\\"modal-footer\\\">\\n                <button type=\\\"button\\\" class=\\\"btn btn-secondary waves-light\\\" aria-label=\\\"Close\\\" (click)=\\\"statusModal.hide(); clearEquipmentInfo()\\\" mdbWavesEffect>Lukk</button>\\n            </div>\\n        </div>\\n    </div>\\n</div>\\n\\n\"","module.exports = \".orderSection {\\n  padding: 2.5%; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { HttpClientModule, HttpHeaders } from '@angular/common/http';\nimport { HttpClient } from '@angular/common/http';\n\nimport { NotificationService } from '../services/notification.service';\nimport {AuthService} from './../services/auth.service';\n\nimport { environment } from '../../environments/environment';\n\n@Component({\n  selector: 'app-user',\n  templateUrl: './user.component.html',\n  styleUrls: ['./user.component.scss']\n})\nexport class UserComponent implements OnInit { \n  public orderIdForUser: any[];\n  public orderRecords: any[] = Array();\n  public equipmentRecordForOrder : any[] = Array();\n  public date = new Date();\n\n\n  constructor(private authService: AuthService, private notificationService: NotificationService, private httpClient: HttpClient) { }\n\n  ngOnInit() {\n    if(this.authService.getId()){\n      this.fetchOrderIds();\n    }\n  }\n\n  fetchOrderIds(){\n    let iDUrl = environment.ApiUrl + \"/orderbyuser\";\n    let payload = {id : this.authService.getId()};\n    this.httpClient.post(iDUrl, payload, environment.httpOptions)\n     .subscribe(\n        (data: any []) => {\n          this.orderIdForUser = data;\n          console.log(this.orderIdForUser);\n        },\n        (error) =>{\n          this.notificationService.alertApiError(error);\n        },\n        () => {\n          this.fetchOrders();\n        }\n    );\n  }\n\n  fetchOrders(){\n    this.orderIdForUser.forEach(element => {\n      let orderUrl = environment.ApiUrl + '/order' + '/' + element;\n      this.httpClient.get(orderUrl, environment.httpOptions)\n        .subscribe(\n          (data: any[]) => {\n            this.orderRecords.push(data[0]);\n          },\n          (error) =>{\n            this.notificationService.alertApiError(error);\n          }, \n          () => {\n          }\n        )\n    });\n    this.notificationService.notifyOrderRecordsRecieved(this.orderRecords.length);\n    \n  }\n\n  modalTrigger(index){\n    let selectedOrderRecord: any[] = Array();\n    let orderEquipmentUrl = environment.ApiUrl + \"/orderbyuser\" + \"/\" + this.orderRecords[index]['order_id'];\n    this.httpClient.get(orderEquipmentUrl, environment.httpOptions)\n      .subscribe(\n        (data: any[])=>{\n          selectedOrderRecord = data;\n          this.fetchEquipmentInfoForSelectedOrderId(selectedOrderRecord);\n        }\n    );\n    \n  }\n\n  fetchEquipmentInfoForSelectedOrderId(orderRecord){\n    orderRecord.forEach(element => {\n      let equipmentInfoUrl = environment.ApiUrl + \"/bike\" + \"/\" + element['bike_id'];\n      this.httpClient.get(equipmentInfoUrl, environment.httpOptions)\n        .subscribe(\n          (data) => {\n            console.log(data);\n            this.equipmentRecordForOrder.push(data[0]);\n          }\n        );\n    });\n  }\n\n  clearEquipmentInfo(){\n    this.equipmentRecordForOrder = []; \n  }\n}\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nimport {HttpHeaders } from '@angular/common/http';\n\nexport const environment = {\n  production: false,\n  ApiUrl: \"http://localhost:5000/api\",\n  httpOptions: {\n    headers: new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': \"{'firstName':'John', 'lastName':'Doe'}\"\n    })\n  }\n\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}